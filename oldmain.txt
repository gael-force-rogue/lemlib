#include "main.h"

#include "devices.h"
#include "lemlib/api.hpp"  // IWYU pragma: keep

using namespace lemlib;

pros::Controller controller(E_CONTROLLER_MASTER);

Lift lift(-18);
Intake intake(19);
ADIDigitalOut clamp('B');
ADIDigitalOut knocker('A');

MotorGroup leftMotors({20, -16, 1}, MotorGearset::blue);
MotorGroup rightMotors({-9, 17, -10}, MotorGearset::blue);

Imu imu(3);

Rotation verticalEncoder(5);
Rotation horizontalEncoder(-21);

TrackingWheel vertical(&verticalEncoder, Omniwheel::NEW_2, -0.5);
TrackingWheel horizontal(&horizontalEncoder, Omniwheel::OLD_275, -1.25);

Drivetrain drivetrain(&leftMotors,         // left motor group
                      &rightMotors,        // right motor group
                      14,                  // 10 inch track width
                      Omniwheel::NEW_275,  // using new 4" omnis
                      600,                 // drivetrain rpm is 360
                      20                   // horizontal drift is 2. If we had traction wheels, it would have been 8
);

// lateral motion controller
ControllerSettings linearController(8,    // proportional gain (kP)
                                    0,    // integral gain (kI)
                                    4,    // derivative gain (kD)
                                    3,    // anti windup
                                    1,    // small error range, in inches
                                    100,  // small error range timeout, in milliseconds
                                    3,    // large error range, in inches
                                    500,  // large error range timeout, in milliseconds
                                    50    // maximum acceleration (slew)
);

// angular motion controller
ControllerSettings angularController(2.5,  // proportional gain (kP)
                                     0,    // integral gain (kI)
                                     14,   // derivative gain (kD)
                                     3,    // anti windup
                                     1,    // small error range, in degrees
                                     100,  // small error range timeout, in milliseconds
                                     3,    // large error range, in degrees
                                     500,  // large error range timeout, in milliseconds
                                     0     // maximum acceleration (slew)
);

ControllerSettings autonomousAngularController(1.5,  // proportional gain (kP)
                                               0,    // integral gain (kI)
                                               14,   // derivative gain (kD)
                                               3,    // anti windup
                                               1,    // small error range, in degrees
                                               100,  // small error range timeout, in milliseconds
                                               3,    // large error range, in degrees
                                               500,  // large error range timeout, in milliseconds
                                               0     // maximum acceleration (slew)
);

// We only have 1 vertical and 1 horizontal
OdomSensors sensors(&vertical, nullptr, &horizontal, nullptr, &imu);

// input curve for throttle input during driver control
ExpoDriveCurve throttleCurve(3,     // joystick deadband out of 127
                             10,    // minimum output where drivetrain will move out of 127
                             1.019  // expo curve gain
);

// input curve for steer input during driver control
ExpoDriveCurve steerCurve(3,     // joystick deadband out of 127
                          10,    // minimum output where drivetrain will move out of 127
                          1.019  // expo curve gain
);

Chassis driverChassis(drivetrain, linearController, angularController, sensors, &throttleCurve, &steerCurve);
Chassis chassis(drivetrain, linearController, autonomousAngularController, sensors, &throttleCurve, &steerCurve);

/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
void on_center_button() {
    static bool pressed = false;
    pressed = !pressed;
    if (pressed) {
        pros::lcd::set_text(2, "I was pressed!");
    } else {
        pros::lcd::clear_line(2);
    }
}

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {
    pros::lcd::initialize();
    pros::lcd::set_text(1, "Hello PROS User!");
    pros::lcd::register_btn1_cb(on_center_button);
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

void antiJam() {
    while (true) {
        intake.handleAntiJam();
        delay(20);
    };
};

void exit_condition(Pose target, double exit_range) {
    double distance = fabs(chassis.getPose().distance(target));
    chassis.waitUntil(distance - exit_range);
    chassis.cancelMotion();
};

void autonomous() {
    Task antiJamTask(antiJam);

    chassis.moveToPoint(0, 24, 3000);
    exit_condition({0, 24}, 2);
    chassis.moveToPose(40, 26, 90, 3000, {.forwards = true, .lead = 0.3});
    exit_condition({40, 26}, 2);
    chassis.moveToPose(0, 0, 180, 3000, {.forwards = true, .lead = 0.3});
};

bool knockerDeployed = false;
void opcontrol() {
    while (true) {
        lcd::print(0, "%d %d %d", (pros::lcd::read_buttons() & LCD_BTN_LEFT) >> 2,
                   (pros::lcd::read_buttons() & LCD_BTN_CENTER) >> 1,
                   (pros::lcd::read_buttons() & LCD_BTN_RIGHT) >> 0);  // Prints status of the emulated screen LCDs

        float y = controller.get_analog(ANALOG_LEFT_Y);
        float x = controller.get_analog(ANALOG_RIGHT_X);

        driverChassis.arcade(y, x);

        if (controller.get_digital_new_press(DIGITAL_A)) {
            clamp.set_value(1);
        } else if (controller.get_digital_new_press(DIGITAL_B)) {
            clamp.set_value(0);
        };
        if (controller.get_digital_new_press(DIGITAL_UP)) {
            knockerDeployed = !knockerDeployed;
            knocker.set_value(static_cast<int>(knockerDeployed));
        };

        delay(20);
    }
}